// Javaと同様にクラス名は先頭大文字とかにすると良いかと思います
// Apexとはいえ、Javaでよく使われているコーディング規約に従うと読みやすくなります
public class sampleCon {
        // 手（1～3本目）    
        // 値を加工しない場合はset;get;で十分だと思います
        String hands;
        String hands2;
        String hands3;
        // 対戦結果（1～3本目）    
        String result;
        String result2;
        String result3;
        // インスタンス変数の使い回しが気になるところです
        // インスタンス変数があるとテストコードを書く際に、そこも考慮しなければならなくなってしまうので、
        // 必要な時以外は使わない方が良いかと思っています
        Integer tmpwin = 0;
        Integer tmpdraw = 0;
        Integer tmplose = 0;
        String tmpresult;
        // 勝敗スコア（1～3本目合計）
        // ～5点：負け、6点：引き分け、7点～：勝ち
        Integer score = 0;   
        // 通算勝敗数
        String totalresult;
        // エラーメッセージ
        String errmessage;
        
        RockPaperScissors__c newResult;
                
        public PageReference test() {
            result = getResult(hands);
            result2 = getResult(hands2);
            result3 = getResult(hands3);
            totalresult = getTotal();
            tmpresult = getTmp();
            insertDB(score);
            insert newResult;
            //System.debug(score);
            //newResult = null;
            tmpwin = 0;
            tmpdraw = 0;
            tmplose = 0;
            score = 0;
            //return null;
            PageReference pr = Page.RockPaperScissors2;
            pr.getParameters().put('result', this.result);
            pr.getParameters().put('result2', this.result2);
            pr.getParameters().put('result3', this.result3);
            pr.getParameters().put('tmpresult', this.tmpresult);
            pr.getParameters().put('totalresult', this.totalresult);
            if ( hands == '-1' || hands2 == '-1' || hands3 == '-1' ){
                // <apex:message>とかを使うと、return PageReference(...)のようなコードになります
                errmessage = '1～3本目のすべての手を選択してください';
                return null;
            } else {
                return pr;
            }
        }
        
        //グーチョキパープルダウンリストの表示
        public List<SelectOption> getItems() {
            List<SelectOption> options = new List<SelectOption>();
            options.add(new SelectOption('-1','選択してください'));
            options.add(new SelectOption('0','グー'));
            options.add(new SelectOption('1','チョキ'));
            options.add(new SelectOption('2','パー'));
            return options;
        }
              
        //対戦結果の表示
        public String getHands() {
            return result;
        }

        public String getHands2() {
            return result2;
        }

        public String getHands3() {
            return result3;
        }
    
        public String getTotalresult() {
            return totalresult;
        }
    
        public String getTmpresult() {
            return tmpresult;
        }
    
        public String getErrmessage() {
            return errmessage;
        }
        
        //対戦結果の表示
        public void setHands(String hands) {
            this.hands = hands;
        }
        public void setHands2(String hands2) {
            this.hands2 = hands2;
        }
        public void setHands3(String hands3) {
            this.hands3 = hands3;
        }
        public void totalresult(String totalresult) {
            this.totalresult = totalresult;
        }   
    
        //対戦相手の手を決める（ランダム）
        public static Integer getRandomNumber(Integer upperLimit) {
          if (upperLimit == null || upperLimit <= 0) {
              return 0;
          }
          Integer rand = Math.round(Math.random()*1000);
          return Math.mod(rand, upperLimit);
        }

        // じゃんけんアルゴリズムを導入されるとぐっと短いコードになりますので、興味ございましたら勉強いただけますと
        public String getResult( String hands ) {
            Integer rand =  getRandomNumber(3);
            String result;
            if ( rand == 0 ) {
                if ( hands == '0'){
                    result = '相手：グー　あなた：グー';
                    score = score + 2;
                    tmpdraw = tmpdraw + 1;
                } else if (hands == '1'){
                    result = '相手：グー　あなた：チョキ';
                    score = score + 1;
                    tmplose = tmplose + 1;
                } else if (hands == '2'){
                    result = '相手：グー　あなた：パー';
                    score = score + 3;
                    tmpwin = tmpwin + 1;
                }
            } else if ( rand == 1 ) {
                if ( hands == '0'){
                    result = '相手：チョキ　あなた：グー';
                    score = score + 3;
                    tmpwin = tmpwin + 1;
                } else if (hands == '1'){
                    result = '相手：チョキ　あなた：チョキ';
                    score = score + 2;
                    tmpdraw = tmpdraw + 1;
                } else if (hands == '2'){
                    result = '相手：チョキ　あなた：パー';
                    score = score + 1;
                    tmplose = tmplose + 1;
                }
            } else if ( rand == 2 ) {
                if ( hands == '0'){
                    result = '相手：パー　あなた：グー';
                    score = score + 1;
                    tmplose = tmplose + 1;
                } else if (hands == '1'){
                    result = '相手：パー　あなた：チョキ';
                    score = score + 3;
                    tmpwin = tmpwin + 1;
                } else if (hands == '2'){
                    result = '相手：パー　あなた：パー';
                    score = score + 2;
                    tmpdraw = tmpdraw + 1;
                }
            } else {
                // 呼び出し元にresultが空文字であった時の条件分岐が無いです。
                // 個人的にはここは例外を出したいところだと考えます
                result = '';
            }
            
            //System.debug('スコアは' + String.valueOf(score));
                       
            return result;
        } 
    
        // insertDBというメソッド名ですが、中身にinsert処理が無いので、
        // 適切なメソッド名に変更された方がよいかと思われます
        public void insertDB(Integer score) {
            this.score = score;
            if ( score == 6 ){
                newResult = new RockPaperScissors__c(Name = 'draw');
            } else if ( score > 6 ){
                newResult = new RockPaperScissors__c(Name = 'win');
            } else if ( score > 0 ){
                newResult = new RockPaperScissors__c(Name = 'lose');
            } else {
                newResult = new RockPaperScissors__c(Name = 'err');
            }
            //score = 0;
        }

        public String getTmp() {
            String tmpresult1 = '【' + String.valueOf(tmpwin) + '勝' + String.valueOf(tmplose) + '敗' + String.valueOf(tmpdraw) + '引き分けで';
            String tmpresult2;
            if ( score == 6 ){
                tmpresult2 = '引き分けです】';
            } else if ( score > 6 ){
                tmpresult2 = 'あなたの勝ちです】';
            } else if ( score > 0 ){
                tmpresult2 = 'あなたの負けです】';
            } else {
                tmpresult2 = '例外です';
            }
            return tmpresult1 + tmpresult2;
        } 
    
        public String getTotal() {
            //トータル勝負結果の取得
            //勝ち回数
            Integer ResultCountWin  = [SELECT COUNT() FROM RockPaperScissors__c WHERE Name = 'win'];
            String RCountWin        = String.valueOf(ResultCountWin);
            //負け回数
            Integer ResultCountLose = [SELECT COUNT() FROM RockPaperScissors__c WHERE Name = 'lose'];
            String RCountLose       = String.valueOf(ResultCountLose);
            //引き分け回数
            Integer ResultCountDraw = [SELECT COUNT() FROM RockPaperScissors__c WHERE Name = 'draw'];
            String RCountDraw       = String.valueOf(ResultCountDraw);

            String total = '【これまでの通算成績は' + RCountWin + '勝' + RCountLose + '敗' + RCountDraw + '引き分けです】';
            return total;
        } 
    }
